buildscript {
    def mcVersion
    def (major, minor, patch) = project.name.tokenize('-')[0].tokenize('.')
    mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
    def fabric = mcVersion >= 11400 && !project.name.endsWith("-forge")
    project.ext.mcVersion = mcVersion
    project.ext.fabric = fabric

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "fabric"
            url = "https://maven.fabricmc.net/"
        }
        if (!fabric) {
            maven {
                name = "forge"
                url = "https://maven.minecraftforge.net"
            }
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        if (fabric) {
            classpath 'fabric-loom:fabric-loom.gradle.plugin:0.11-SNAPSHOT'
        } else if (mcVersion >= 11400) {
            classpath('net.minecraftforge.gradle:ForgeGradle:5.0.5') { // the FG people still haven't learned to not do breaking changes
                exclude group: 'trove', module: 'trove' // preprocessor/idea requires more recent one
            }
        } else if (mcVersion >= 10800) {
            classpath('com.github.ReplayMod:ForgeGradle:' + (
                    mcVersion >= 11200 ? '34ab703' : // FG 2.3
                    mcVersion >= 10904 ? '5d1e8d8' : // FG 2.2
                                         'ceb83c0'   // FG 2.1
            ) + ':all')
        } else {
            classpath 'com.github.ReplayMod:ForgeGradle:a8a9e0ca:all' // FG 1.2
        }
    }
}

def FG3 = !fabric && mcVersion >= 11400
def FABRIC = fabric

apply plugin: 'java-library'
if (FABRIC) {
    apply plugin: 'fabric-loom'
} else if (FG3) {
    apply plugin: 'net.minecraftforge.gradle'
} else if (mcVersion >= 10800) {
    apply plugin: 'net.minecraftforge.gradle.forge'
} else {
    apply plugin: 'forge'
}
apply plugin: 'com.replaymod.preprocess'

preprocess {
    vars.put("MC", project.mcVersion)
    vars.put("FABRIC", project.fabric ? 1 : 0)
}

group 'de.johni0702.minecraft.jgui'
version 'git'

sourceCompatibility = targetCompatibility = mcVersion >= 11800 ? 17 : mcVersion >= 11700 ? 16 : 1.8

if (mcVersion >= 11400) {
    sourceSets {
        api
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "fabric"
        url = "https://maven.fabricmc.net/"
    }
    maven { url 'https://jitpack.io' }
    maven {
        name = "SpongePowered Repo"
        url = "https://repo.spongepowered.org/maven/"
    }
}

dependencies {
    api('com.github.ReplayMod:lwjgl-utils:27dcd66')
}

if (FABRIC) {
    loom {
        mixin.defaultRefmapName.set('mixins.jgui.refmap.json')
    }
} else {
    minecraft {
        if (!FG3) {
            version = [
                    11200: '1.12.2-14.23.0.2486',
                    10904: '1.9.4-12.17.0.1976',
                    10809: '1.8.9-11.15.1.1722',
                    10800: '1.8-11.14.4.1563',
                    10710: '1.7.10-10.13.4.1558-1.7.10',
            ][mcVersion]
        }
        mappings = [
                11404: "snapshot_20190719-1.14.3",
                11200: 'snapshot_20170615',
                10904: 'snapshot_20160518',
                10809: 'stable_22',
                10800: 'snapshot_nodoc_20141130',
                10710: 'stable_12',
        ][mcVersion]
    }
}

dependencies {
    if (FABRIC) {
        minecraft 'com.mojang:minecraft:' + [
                11404: '1.14.4',
                11502: '1.15.2',
                11601: '1.16.1',
                11604: '1.16.4',
                11701: '1.17.1',
                11801: '1.18.1',
                11802: '1.18.2',
                11900: '1.19',
                11901: '1.19.1',
                11902: '1.19.2',
                11903: '1.19.3-rc3',
                11904: '1.19.4',
                12001: '1.20.1',
        ][mcVersion]
        mappings 'net.fabricmc:yarn:' + [
                11404: '1.14.4+build.16',
                11502: '1.15.2+build.14',
                11601: '1.16.1+build.17:v2',
                11604: '1.16.4+build.6:v2',
                11701: '1.17.1+build.29:v2',
                11801: '1.18.1+build.1:v2',
                11802: '1.18.2+build.1:v2',
                11900: '1.19+build.2:v2',
                11901: '1.19.1+build.5:v2',
                11902: '1.19.2+build.28:v2',
                11903: '1.19.3-rc3+build.1:v2',
                11904: '1.19.4+build.1:v2',
                12001: '1.20.1+build.2:v2',
        ][mcVersion]
        modImplementation 'net.fabricmc:fabric-loader:0.14.6'
    }
    if (FG3) {
        minecraft 'net.minecraftforge:forge:' + [
                11404: '1.14.4-28.1.113',
        ][mcVersion]
    }

    if (!FABRIC) {
        // Mixin 0.8 is no longer compatible with MC 1.11.2 or older
        def mixinVersion = mcVersion >= 11200 ? '0.8.2' : '0.7.11-SNAPSHOT'
        annotationProcessor "org.spongepowered:mixin:$mixinVersion"
        compileOnly "org.spongepowered:mixin:$mixinVersion"

        // Mixin needs these (and depends on them but for some reason that's not enough. FG, did you do that?)
        annotationProcessor 'com.google.code.gson:gson:2.2.4'
        annotationProcessor 'com.google.guava:guava:21.0'
        annotationProcessor 'org.ow2.asm:asm-tree:6.2'
        annotationProcessor 'org.apache.logging.log4j:log4j-core:2.0-beta9'
    }

    if (mcVersion >= 11604) {
        implementation(annotationProcessor('com.github.LlamaLad7:MixinExtras:0.1.1'))
    }
}

if (!FABRIC) {
    ext {
        mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.srg')
        mixinRefMap = new File(project.buildDir, 'tmp/mixins/mixins.replaymod.refmap.json')
    }

    compileJava {
        options.compilerArgs += [
                "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
                "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
                "-AreobfSrgFile=${project.file('build/mcp-srg.srg').canonicalPath}"
        ]
    }
}

if (FABRIC) {
    // not required, fabric manages those by itself just fine
} else if (FG3) {
    task copySrg(dependsOn: 'createMcpToSrg') {
        doLast {
            def tsrg = file(project.tasks.createMcpToSrg.output).readLines()
            def srg = []
            def cls = ''
            for (def line : tsrg) {
                if (line[0] != '\t') {
                    srg.add('CL: ' + line)
                    cls = line.split(' ')[0]
                } else {
                    def parts = line.substring(1).split(' ')
                    if (line.contains('(')) {
                        srg.add('MD: ' + cls + '/' + parts[0] + ' ' + parts[1] + ' ' + cls + '/' + parts[2] + ' ' + parts[1])
                    } else {
                        srg.add('FD: ' + cls + '/' + parts[0] + ' ' + cls + '/' + parts[1])
                    }
                }
            }
            new File(project.buildDir, 'mcp-srg.srg').write(srg.join('\n'))
        }
    }
    compileJava.dependsOn copySrg
} else {
    task copySrg(type: Copy, dependsOn: 'genSrgs') {
        from {project.tasks.genSrgs.mcpToSrg}
        into 'build'
    }
    compileJava.dependsOn copySrg
}

if (!FABRIC && !FG3) {
    if (mcVersion <= 10710) {
        reobf.addExtraSrgFile project.mixinSrg
    } else {
        reobfJar.addSecondarySrgFile project.mixinSrg
    }
}
